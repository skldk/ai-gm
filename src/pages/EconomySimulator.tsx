import React, { useState, useRef, useEffect } from 'react';
import ReactDOM from 'react-dom';

function formatNumber(value: number) {
  return value.toLocaleString('ru-RU');
}

// –¶–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–ø—Ä–∏–º–µ—Ä)
const TARGET = {
  minMonths: 12,
  cac: 3000,
  ltv: 12000,
  fixed: 9000,
};

// –û–ø–∏—Å–∞–Ω–∏–µ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∞—á–∏–≤–æ–∫
const ACHIEVEMENTS: Record<string, { label: string; color: string; bg: string; icon: string; desc: string }> = {
  '–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞!': {
    label: '–ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞!',
    color: '#2196f3',
    bg: 'linear-gradient(90deg,#e3f2fd,#bbdefb)',
    icon: 'üöÄ',
    desc: '–¢—ã –Ω–∞—á–∞–ª –ø—É—Ç—å!'
  },
  '–≠–∫–æ–Ω–æ–º–∏—Å—Ç!': {
    label: '–≠–∫–æ–Ω–æ–º–∏—Å—Ç!',
    color: '#58cc02',
    bg: 'linear-gradient(90deg,#e6ffe6,#b9f6ca)',
    icon: 'üß†',
    desc: '–¢—ã –ø–æ–¥–æ–±—Ä–∞–ª –∏–¥–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã!'
  },
  '–ù–µ —Å–¥–∞–ª —Å 3-–π –ø–æ–ø—ã—Ç–∫–∏': {
    label: '–ù–µ —Å–¥–∞–ª —Å 3-–π –ø–æ–ø—ã—Ç–∫–∏',
    color: '#ff4b4b',
    bg: 'linear-gradient(90deg,#ffeaea,#ffd6d6)',
    icon: 'üíÄ',
    desc: '–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ ‚Äî –æ–ø—ã—Ç –≤–∞–∂–Ω–µ–µ –ø–æ–±–µ–¥—ã!'
  },
};

// --- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∞—á–∏–≤–∫–∏ ---
const ACHIEVEMENTS_EXT: {
  key: string;
  label: string;
  desc: string;
  check: (params: { metrics: Metrics; history: Metrics[]; riskFails: number; abTests: number; partnerships: number; viralityClients: number; supportUpgrades: number; opexLowStreak: number; }) => boolean;
}[] = [
  {
    key: 'cacczar',
    label: '–¶–∞—Ä—å CAC',
    desc: '–°–Ω–∏–∑–∏—Ç—å CAC –¥–æ $25 –∏ –¥–µ—Ä–∂–∞—Ç—å 3 —Ö–æ–¥–∞ –ø–æ–¥—Ä—è–¥.',
    check: ({ history }) => history.slice(-3).every(m => m.CAC <= 25),
  },
  {
    key: 'ltvlegend',
    label: 'LTV-–ª–µ–≥–µ–Ω–¥–∞',
    desc: 'LTV ‚â• $200, Retention ‚â• 80%, NPS ‚â• 70.',
    check: ({ metrics }) => metrics.LTV >= 200 && metrics.Retention >= 80 && metrics.NPS >= 70,
  },
  {
    key: 'viralvirus',
    label: '–í–∏—Ä–∞–ª—å–Ω—ã–π –≤–∏—Ä—É—Å',
    desc: '–ü—Ä–∏–≤–ª–µ—á—å 500 –∫–ª–∏–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Virality.',
    check: ({ viralityClients }) => viralityClients >= 500,
  },
  {
    key: 'retuniverse',
    label: '–£–¥–µ—Ä–∂–∞—Ç–µ–ª—å –≤—Å–µ–ª–µ–Ω–Ω–æ–π',
    desc: 'Retention ‚â• 90% –ø–æ—Å–ª–µ 5 —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç–∞.',
    check: ({ metrics, supportUpgrades }) => metrics.Retention >= 90 && supportUpgrades >= 5,
  },
  {
    key: 'riskmaster',
    label: '–ú–∞—Å—Ç–µ—Ä —Ä–∏—Å–∫–æ–≤',
    desc: '–í—ã–∏–≥—Ä–∞—Ç—å –ø–æ—Å–ª–µ 3 –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.',
    check: ({ riskFails, metrics }) => riskFails >= 3 && metrics.Profit >= WIN_PROFIT,
  },
  {
    key: 'optimizer',
    label: '–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä',
    desc: '10 —É—Å–ø–µ—à–Ω—ã—Ö A/B —Ç–µ—Å—Ç–æ–≤ (–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã —Å –ø—Ä–∏—Ä–æ—Å—Ç–æ–º Conversion).',
    check: ({ abTests }) => abTests >= 10,
  },
  {
    key: 'networker',
    label: '–ù–µ—Ç–≤–æ—Ä–∫–µ—Ä',
    desc: '5 –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤.',
    check: ({ partnerships }) => partnerships >= 5,
  },
  {
    key: 'crisismanager',
    label: '–ö—Ä–∏–∑–∏—Å-–º–µ–Ω–µ–¥–∂–µ—Ä',
    desc: '–ü–µ—Ä–µ–∂–∏—Ç—å 2 —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∫—Ä–∏–∑–∏—Å–∞ (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Ä–∏—Å–∫–∏).',
    check: ({ riskFails }) => riskFails >= 2,
  },
  {
    key: 'supportninja',
    label: '–ù–∏–Ω–¥–∑—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
    desc: 'NPS ‚â• 85 –ø–æ—Å–ª–µ 3 —É–ª—É—á—à–µ–Ω–∏–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.',
    check: ({ metrics, supportUpgrades }) => metrics.NPS >= 85 && supportUpgrades >= 3,
  },
  {
    key: 'financemaster',
    label: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –≥—É—Ä—É',
    desc: 'OpEx ‚â§ $100 –≤ —Ç–µ—á–µ–Ω–∏–µ 4 —Ö–æ–¥–æ–≤.',
    check: ({ history }) => history.slice(-4).every(m => m.OpEx <= 100),
  },
];

// –ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å
function BreakEvenChart({ cac, ltv, fixed, users }: { cac: number; ltv: number; fixed: number; users: number }) {
  // –ú–æ–¥–µ–ª–∏—Ä—É–µ–º 24 –º–µ—Å—è—Ü–∞
  const months = 24;
  let balance = -fixed; // —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
  const data: { x: number; y: number }[] = [{ x: 0, y: balance }];
  let breakEvenMonth: number | null = null;
  for (let i = 1; i <= months; i++) {
    balance += (cac - ltv) * users - fixed;
    data.push({ x: i, y: balance });
    if (breakEvenMonth === null && balance >= 0) breakEvenMonth = i;
  }
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
  const minY = Math.min(...data.map(d => d.y), 0);
  const maxY = Math.max(...data.map(d => d.y), 0);
  const W = 420, H = 200, pad = 44;
  const scaleX = (x: number) => pad + (x / months) * (W - 2 * pad);
  const scaleY = (y: number) => H - pad - ((y - minY) / (maxY - minY || 1)) * (H - 2 * pad);
  // –õ–∏–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
  const path = data.map((d, i) => `${i === 0 ? 'M' : 'L'}${scaleX(d.x)},${scaleY(d.y)}`).join(' ');
  // –û—Å—å X: –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ 6 –º–µ—Å
  const xLabels = [0, 6, 12, 18, 24];
  // –û—Å—å Y: –ø–æ–¥–ø–∏—Å–∏ min, 0, max
  const yLabels = [minY, 0, maxY];
  // –î–µ–ª–µ–Ω–∏—è (grid)
  const gridX = xLabels;
  const gridY = [minY, (minY+maxY)/2, 0, (maxY+0)/2, maxY];
  return (
    <div style={{ margin: '32px auto 0', maxWidth: 640, width: '100%', background: 'rgba(255,255,255,0.85)', borderRadius: 28, boxShadow: '0 8px 32px rgba(0,0,0,0.10)', padding: 32, display: 'block' }}>
      <div style={{ fontWeight: 700, fontSize: 22, background: 'linear-gradient(90deg,#0a2540,#00b8ff 80%)', WebkitBackgroundClip: 'text', color: 'transparent', marginBottom: 8, letterSpacing: -1 }}>–ì—Ä–∞—Ñ–∏–∫ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å</div>
      <div style={{ width: '100%', overflowX: 'auto' }}>
        <svg
          viewBox={`0 0 ${W} ${H}`}
          style={{ width: '100%', height: 'auto', minWidth: 320, maxWidth: '100%', display: 'block' }}
          preserveAspectRatio="xMinYMin meet"
        >
          {/* Grid Y */}
          {gridY.map((y, i) => (
            <line key={i} x1={pad} y1={scaleY(y)} x2={W - pad} y2={scaleY(y)} stroke="#e5e5e7" strokeWidth={1} strokeDasharray="4 4" />
          ))}
          {/* Grid X */}
          {gridX.map((x, i) => (
            <line key={i} y1={pad} x1={scaleX(x)} y2={H - pad} x2={scaleX(x)} stroke="#e5e5e7" strokeWidth={1} strokeDasharray="4 4" />
          ))}
          {/* –û—Å–∏ */}
          <line x1={pad} y1={H - pad} x2={W - pad} y2={H - pad} stroke="#bbb" strokeWidth={1.5} />
          <line x1={pad} y1={pad} x2={pad} y2={H - pad} stroke="#bbb" strokeWidth={1.5} />
          {/* –õ–∏–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ */}
          <path d={path} fill="none" stroke="url(#grad)" strokeWidth={3} />
          <defs>
            <linearGradient id="grad" x1="0" y1="0" x2="1" y2="0">
              <stop offset="0%" stopColor="#00b8ff" />
              <stop offset="100%" stopColor="#7800ff" />
            </linearGradient>
          </defs>
          {/* –¢–æ—á–∫–∞ –≤—ã—Ö–æ–¥–∞ –Ω–∞ –æ–∫—É–ø–∞–µ–º–æ—Å—Ç—å */}
          {breakEvenMonth && (
            <circle
              cx={scaleX(breakEvenMonth)}
              cy={scaleY(data[breakEvenMonth].y)}
              r={8}
              fill="#fff"
              stroke="#00b8ff"
              strokeWidth={4}
              style={{ filter: 'drop-shadow(0 2px 8px #00b8ff44)' }}
            />
          )}
          {/* –ü–æ–¥–ø–∏—Å–∏ X */}
          {xLabels.map(x => (
            <text key={x} x={scaleX(x)} y={H - pad + 28} fontSize={15} fill="#888" textAnchor="middle">{x}</text>
          ))}
          {/* –ü–æ–¥–ø–∏—Å–∏ Y */}
          {yLabels.map(y => (
            <text key={y} x={pad - 12} y={scaleY(y) + 5} fontSize={15} fill="#888" textAnchor="end">{formatNumber(Math.round(y))}</text>
          ))}
          {/* –ù–∞–∑–≤–∞–Ω–∏—è –æ—Å–µ–π */}
          <text x={W/2} y={H - 2} fontSize={16} fill="#0a2540" textAnchor="middle" fontWeight={600}>–ú–µ—Å—è—Ü—ã</text>
          <text x={pad - 32} y={pad - 8} fontSize={16} fill="#0a2540" textAnchor="middle" fontWeight={600} transform={`rotate(-90,${pad - 32},${pad - 8})`}>–ë–∞–ª–∞–Ω—Å, ‚ÇΩ</text>
        </svg>
      </div>
      <div style={{ color: '#888', fontSize: 15, marginTop: 6 }}>
        {breakEvenMonth && (
          <span style={{ color: '#00b8ff', fontWeight: 600 }}>
            –û–∫—É–ø–∞–µ–º–æ—Å—Ç—å: {breakEvenMonth} –º–µ—Å.
          </span>
        )}
      </div>
    </div>
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
function handleNumberInput(e: React.ChangeEvent<HTMLInputElement>, setter: (v: number) => void) {
  const raw = e.target.value.replace(/\D/g, '');
  setter(raw ? parseInt(raw, 10) : 0);
}

// –í—ã–Ω–µ—Å—Ç–∏ –∞—á–∏–≤–∫–∏ –≤ —Ñ—É—Ç–µ—Ä
function AchievementsFooter({ achievements }: { achievements: string[] }) {
  if (!achievements.length) return null;
  return (
    <div style={{
      position: 'absolute',
      top: 0,
      left: 0,
      width: '100%',
      zIndex: 10,
      pointerEvents: 'none',
      display: 'flex',
      justifyContent: 'center',
      alignItems: 'flex-start',
      paddingTop: 0,
    }}>
      <div style={{
        width: 'auto',
        background: 'rgba(255,255,255,0.97)',
        boxShadow: '0 2px 24px rgba(0,0,0,0.08)',
        padding: '18px 32px 12px 32px',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        gap: 18,
        minHeight: 56,
        fontFamily: 'SF Pro Display, Helvetica Neue, Arial, sans-serif',
        borderRadius: 18,
        marginTop: 18,
        pointerEvents: 'auto',
      }}>
        {achievements.map((ach, i) => {
          const meta = ACHIEVEMENTS[ach] || { label: ach, color: '#888', bg: '#f3f3f3', icon: '‚≠ê', desc: '' };
          return (
            <div key={i} style={{
              background: '#fafafa',
              color: meta.color,
              borderRadius: 14,
              padding: '10px 18px',
              fontWeight: 700,
              fontSize: 16,
              border: `1.5px solid #e5e5e7`,
              boxShadow: '0 1px 4px rgba(0,0,0,0.04)',
              display: 'flex',
              alignItems: 'center',
              gap: 10,
              minWidth: 160,
              marginBottom: 0,
              position: 'relative',
              transition: 'box-shadow 0.3s',
            }}>
              <span style={{ fontSize: 22, marginRight: 6 }}>{meta.icon}</span>
              <div>
                <div style={{ fontWeight: 700, fontSize: 16, marginBottom: 1 }}>{meta.label}</div>
                <div style={{ fontWeight: 500, fontSize: 13, color: '#888', opacity: 0.85 }}>{meta.desc}</div>
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
}

// --- Unit Quest Game ---
// –î–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
const MAX_TURNS = 10;
const WIN_PROFIT = 200000;

// CSS –¥–ª—è fade/slide –∞–Ω–∏–º–∞—Ü–∏–π (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª)
const fadeStyle = {
  transition: 'opacity 0.5s cubic-bezier(.4,0,.2,1), transform 0.5s cubic-bezier(.4,0,.2,1)',
  opacity: 1,
  transform: 'translateY(0px)'
};
const fadeHiddenStyle = {
  opacity: 0,
  transform: 'translateY(24px)'
};

function getRandomInitMetrics() {
  return {
    CAC: Math.round(40 + Math.random() * 20), // 40-60
    LTV: Math.round(20 + Math.random() * 20), // 20-40
    Retention: Math.round(50 + Math.random() * 20), // 50-70
    Conversion: Math.round(3 + Math.random() * 4), // 3-7
    Clients: Math.round(80 + Math.random() * 40), // 80-120
    Budget: Math.round(800 + Math.random() * 400), // 800-1200
    Fixed: 200,
    Profit: 0,
    NPS: Math.round(40 + Math.random() * 20), // 40-60
    Virality: 0.1 + Math.random() * 0.2, // 0.1-0.3
    Traffic: Math.round(100 + Math.random() * 50), // 100-150
    OpEx: 200 + Math.round(Math.random() * 100), // 200-300
  };
}
const INIT_METRICS = getRandomInitMetrics();

type Metrics = ReturnType<typeof getRandomInitMetrics>;
const INITIATIVES: {
  icon: string;
  title: string;
  description: string;
  apply: (m: Metrics) => Partial<Metrics>;
  feedback: string;
  risk?: { chance: number; effect: (m: Metrics) => Partial<Metrics>; message: string; condition?: (m: Metrics) => boolean };
}[] = [
  // –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
  {
    icon: 'üîé',
    title: '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞ –≤ Google Ads',
    description: 'CAC -$10, –ö–æ–Ω–≤–µ—Ä—Å–∏—è +2%. –†–∏—Å–∫: –ü—Ä–∏ NPS < 50 ‚Üí CAC +$15 (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç—å).',
    apply: m => ({ CAC: Math.max(m.CAC - 10, 0), Conversion: Math.min(m.Conversion + 2, 100) }),
    feedback: '–†–µ–∫–ª–∞–º–∞ –ø—Ä–∏–≤–µ–ª–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–∞.',
    risk: {
      chance: 0.2,
      effect: m => ({ CAC: m.CAC + 15 }),
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∂–∞–ª—É—é—Ç—Å—è –Ω–∞ –Ω–∞–≤—è–∑—á–∏–≤—É—é —Ä–µ–∫–ª–∞–º—É ‚Äî CAC –≤—ã—Ä–æ—Å!',
      condition: m => m.NPS < 50
    }
  },
  {
    icon: 'üì¢',
    title: '–¢–∞—Ä–≥–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö',
    description: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è +3%, Virality +0.1. –†–∏—Å–∫: –ü—Ä–∏ Retention < 50% ‚Üí NPS -7.',
    apply: m => ({ Conversion: Math.min(m.Conversion + 3, 100), Virality: m.Virality + 0.1 }),
    feedback: '–†–∞—Å—Å—ã–ª–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–∞.',
    risk: {
      chance: 0.2,
      effect: m => ({ NPS: m.NPS - 7 }),
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å—á–∏—Ç–∞—é—Ç —Ä–∞—Å—Å—ã–ª–∫—É —Å–ø–∞–º–æ–º ‚Äî NPS —Å–Ω–∏–∑–∏–ª—Å—è!',
      condition: m => m.Retention < 50
    }
  },
  {
    icon: 'ü§ù',
    title: '–ö–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è —Å –º–∏–∫—Ä–æ–±–ª–æ–≥–µ—Ä–æ–º',
    description: '–¢—Ä–∞—Ñ–∏–∫ +20%, LTV +$10. –†–∏—Å–∫: –ï—Å–ª–∏ –±–ª–æ–≥–µ—Ä —Ç–µ—Ä—è–µ—Ç –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Üí –¢—Ä–∞—Ñ–∏–∫ -30%.',
    apply: m => ({ Traffic: m.Traffic + 20, LTV: m.LTV + 10 }),
    feedback: '–ë–ª–æ–≥–µ—Ä –ø—Ä–∏–≤—ë–ª –Ω–æ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é!',
    risk: {
      chance: 0.15,
      effect: m => ({ Traffic: Math.max(m.Traffic - 30, 0) }),
      message: '–ë–ª–æ–≥–µ—Ä –ø–æ—Ç–µ—Ä—è–ª –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å ‚Äî —Ç—Ä–∞—Ñ–∏–∫ —É–ø–∞–ª!',
      condition: m => true
    }
  },
  // –ü—Ä–æ–¥—É–∫—Ç
  {
    icon: '‚ú®',
    title: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏',
    description: 'Retention +8%, LTV +$15. –†–∏—Å–∫: 25% —à–∞–Ω—Å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±–∞–≥–Ω—É—Ç–∞—è ‚Üí NPS -10, OpEx +$100.',
    apply: m => ({ Retention: Math.min(m.Retention + 8, 100), LTV: m.LTV + 15 }),
    feedback: '–ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –∫–ª–∏–µ–Ω—Ç–∞–º!',
    risk: {
      chance: 0.25,
      effect: m => ({ NPS: m.NPS - 10, OpEx: m.OpEx + 100 }),
      message: '–§—É–Ω–∫—Ü–∏—è –æ–∫–∞–∑–∞–ª–∞—Å—å —Å –±–∞–≥–∞–º–∏ ‚Äî NPS –∏ OpEx –ø–æ—Å—Ç—Ä–∞–¥–∞–ª–∏.',
      condition: m => true
    }
  },
  {
    icon: 'üöÄ',
    title: '–£–ø—Ä–æ—â–µ–Ω–∏–µ onboarding',
    description: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è +5%, Retention +5%. –†–∏—Å–∫: –ü—Ä–∏ —á–∞—Å—Ç—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö ‚Üí NPS -5.',
    apply: m => ({ Conversion: Math.min(m.Conversion + 5, 100), Retention: Math.min(m.Retention + 5, 100) }),
    feedback: 'Onboarding —Å—Ç–∞–ª –ø—Ä–æ—â–µ!',
    risk: {
      chance: 0.2,
      effect: m => ({ NPS: m.NPS - 5 }),
      message: '–ö–ª–∏–µ–Ω—Ç—ã —Ç–µ—Ä—è—é—Ç—Å—è –∏–∑-–∑–∞ —á–∞—Å—Ç—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî NPS —Å–Ω–∏–∑–∏–ª—Å—è.',
      condition: m => true
    }
  },
  {
    icon: 'üí≥',
    title: '–í–≤–æ–¥ –ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏',
    description: 'LTV +$25, –ö–æ–Ω–≤–µ—Ä—Å–∏—è -3%. –†–∏—Å–∫: –ï—Å–ª–∏ LTV > $150 ‚Üí –ö–æ–Ω–≤–µ—Ä—Å–∏—è +2%.',
    apply: m => ({ LTV: m.LTV + 25, Conversion: Math.max(m.Conversion - 3, 0) }),
    feedback: '–ü–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞ LTV, –Ω–æ —á–∞—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ —É—à–ª–∞.',
    risk: {
      chance: 0.2,
      effect: m => ({ Conversion: m.Conversion + 2 }),
      message: '–ü—Ä–µ–º–∏—É–º-—Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≤–ª—ë–∫ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!',
      condition: m => m.LTV > 150
    }
  },
  // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
  {
    icon: 'üí¨',
    title: '–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω—ã–π —á–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π',
    description: 'NPS +10, Retention +7%. –†–∏—Å–∫: OpEx +$120/–º–µ—Å.',
    apply: m => ({ NPS: m.NPS + 10, Retention: Math.min(m.Retention + 7, 100) }),
    feedback: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞–ª–∞ –ª—É—á—à–µ, –∫–ª–∏–µ–Ω—Ç—ã –¥–æ–≤–æ–ª—å–Ω—ã!',
    risk: {
      effect: m => ({ OpEx: m.OpEx + 120 }),
      message: '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤—ã—Ä–æ—Å–ª–∏ (OpEx)!',
      chance: 1,
      condition: m => true
    }
  },
  {
    icon: 'ü§ñ',
    title: '–í–Ω–µ–¥—Ä–µ–Ω–∏–µ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞',
    description: 'OpEx -$50, NPS +5. –†–∏—Å–∫: 20% —à–∞–Ω—Å, —á—Ç–æ AI –æ—à–∏–±–∞–µ—Ç—Å—è ‚Üí NPS -15.',
    apply: m => ({ OpEx: Math.max(m.OpEx - 50, 0), NPS: m.NPS + 5 }),
    feedback: 'AI-–ø–æ–º–æ—â–Ω–∏–∫ —Å–Ω–∏–∑–∏–ª –∑–∞—Ç—Ä–∞—Ç—ã –∏ –ø–æ–≤—ã—Å–∏–ª NPS!',
    risk: {
      chance: 0.2,
      effect: m => ({ NPS: m.NPS - 15 }),
      message: 'AI –¥–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Äî NPS —Å–Ω–∏–∑–∏–ª—Å—è.',
      condition: m => true
    }
  },
  // –ü–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
  {
    icon: 'üîó',
    title: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º',
    description: '–¢—Ä–∞—Ñ–∏–∫ +40%, LTV +$20. –†–∏—Å–∫: –ï—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –º–µ–Ω—è–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É ‚Üí –¢—Ä–∞—Ñ–∏–∫ -50%.',
    apply: m => ({ Traffic: m.Traffic + 40, LTV: m.LTV + 20 }),
    feedback: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–ª–∞ –º–æ—â–Ω—ã–π –ø—Ä–∏—Ä–æ—Å—Ç!',
    risk: {
      chance: 0.15,
      effect: m => ({ Traffic: Math.max(m.Traffic - 50, 0) }),
      message: '–°–µ—Ä–≤–∏—Å –∏–∑–º–µ–Ω–∏–ª –ø–æ–ª–∏—Ç–∏–∫—É ‚Äî —Ç—Ä–∞—Ñ–∏–∫ —É–ø–∞–ª.',
      condition: m => true
    }
  },
  {
    icon: 'üéâ',
    title: '–°–æ–≤–º–µ—Å—Ç–Ω–∞—è –∞–∫—Ü–∏—è —Å –±—Ä–µ–Ω–¥–æ–º',
    description: 'CAC -$15, Virality +0.2. –†–∏—Å–∫: –ü—Ä–∏ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ –¶–ê ‚Üí –ö–æ–Ω–≤–µ—Ä—Å–∏—è -4%.',
    apply: m => ({ CAC: Math.max(m.CAC - 15, 0), Virality: m.Virality + 0.2 }),
    feedback: '–ê–∫—Ü–∏—è —Å –±—Ä–µ–Ω–¥–æ–º –ø–æ–≤—ã—Å–∏–ª–∞ —É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å!',
    risk: {
      chance: 0.2,
      effect: m => ({ Conversion: Math.max(m.Conversion - 4, 0) }),
      message: '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–≤–ø–∞–ª–∞ ‚Äî –∫–æ–Ω–≤–µ—Ä—Å–∏—è —É–ø–∞–ª–∞.',
      condition: m => true
    }
  },
  // –û–ø–µ—Ä–∞—Ü–∏–∏
  {
    icon: 'üìä',
    title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏',
    description: 'OpEx -$30, –ö–æ–Ω–≤–µ—Ä—Å–∏—è +1%. –†–∏—Å–∫: –ü—Ä–∏ —Å–±–æ–µ ‚Üí –ö–æ–Ω–≤–µ—Ä—Å–∏—è -3%.',
    apply: m => ({ OpEx: Math.max(m.OpEx - 30, 0), Conversion: Math.min(m.Conversion + 1, 100) }),
    feedback: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É—Å–∫–æ—Ä–∏–ª–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫—É!',
    risk: {
      chance: 0.2,
      effect: m => ({ Conversion: Math.max(m.Conversion - 3, 0) }),
      message: '–°–±–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ ‚Äî –∫–æ–Ω–≤–µ—Ä—Å–∏—è —É–ø–∞–ª–∞.',
      condition: m => true
    }
  },
  {
    icon: '‚òÅÔ∏è',
    title: '–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã',
    description: 'OpEx -$40, NPS +3. –†–∏—Å–∫: 10% —à–∞–Ω—Å –Ω–∞ —Å–±–æ–π ‚Üí NPS -10.',
    apply: m => ({ OpEx: Math.max(m.OpEx - 40, 0), NPS: m.NPS + 3 }),
    feedback: '–°–µ—Ä–≤–µ—Ä–∞ —Å—Ç–∞–ª–∏ –±—ã—Å—Ç—Ä–µ–µ –∏ –¥–µ—à–µ–≤–ª–µ!',
    risk: {
      chance: 0.1,
      effect: m => ({ NPS: m.NPS - 10 }),
      message: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π ‚Äî NPS —Å–Ω–∏–∑–∏–ª—Å—è.',
      condition: m => true
    }
  },
  // –õ–æ—è–ª—å–Ω–æ—Å—Ç—å
  {
    icon: 'üí∞',
    title: '–°–∏—Å—Ç–µ–º–∞ –∫—ç—à–±—ç–∫–∞',
    description: 'Retention +10%, LTV +$10. –†–∏—Å–∫: –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏ ‚Üí CAC +$10.',
    apply: m => ({ Retention: Math.min(m.Retention + 10, 100), LTV: m.LTV + 10 }),
    feedback: '–ö—ç—à–±—ç–∫ –ø–æ–≤—ã—Å–∏–ª –ª–æ—è–ª—å–Ω–æ—Å—Ç—å!',
    risk: {
      chance: 0.2,
      effect: m => ({ CAC: m.CAC + 10 }),
      message: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã –≤—ã–Ω—É–¥–∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å CAC.',
      condition: m => true
    }
  },
  {
    icon: 'üéüÔ∏è',
    title: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤',
    description: 'NPS +12, Virality +0.3. –†–∏—Å–∫: OpEx +$200.',
    apply: m => ({ NPS: m.NPS + 12, Virality: m.Virality + 0.3 }),
    feedback: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–≤—ã—Å–∏–ª–∏ –ª–æ—è–ª—å–Ω–æ—Å—Ç—å –∏ –≤–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å!',
    risk: {
      effect: m => ({ OpEx: m.OpEx + 200 }),
      message: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π —É–≤–µ–ª–∏—á–∏–ª–∞ OpEx.',
      chance: 1,
      condition: m => true
    }
  },
  // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
  {
    icon: 'üî¨',
    title: '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö',
    description: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è +4%, LTV +$10. –†–∏—Å–∫: –ü—Ä–∏ —É—Ç–µ—á–∫–µ –¥–∞–Ω–Ω—ã—Ö ‚Üí NPS -20, OpEx +$150.',
    apply: m => ({ Conversion: Math.min(m.Conversion + 4, 100), LTV: m.LTV + 10 }),
    feedback: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–º–æ–≥–ª–∞ –ø–æ–Ω—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤!',
    risk: {
      chance: 0.15,
      effect: m => ({ NPS: m.NPS - 20, OpEx: m.OpEx + 150 }),
      message: '–£—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö ‚Äî —à—Ç—Ä–∞—Ñ—ã –∏ –ø–∞–¥–µ–Ω–∏–µ NPS.',
      condition: m => true
    }
  },
  {
    icon: 'üìà',
    title: '–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–æ—Å–∞',
    description: 'CAC -$5, Retention +5%. –†–∏—Å–∫: –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ ‚Üí LTV -$10.',
    apply: m => ({ CAC: Math.max(m.CAC - 5, 0), Retention: Math.min(m.Retention + 5, 100) }),
    feedback: '–ü—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è —Ç–æ—á–Ω—ã–º!',
    risk: {
      chance: 0.2,
      effect: m => ({ LTV: Math.max(m.LTV - 10, 0) }),
      message: '–û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ ‚Äî LTV —Å–Ω–∏–∑–∏–ª—Å—è.',
      condition: m => true
    }
  },
  // –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
  {
    icon: 'üèÜ',
    title: '–£—á–∞—Å—Ç–∏–µ –≤ –æ—Ç—Ä–∞—Å–ª–µ–≤–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏',
    description: '–¢—Ä–∞—Ñ–∏–∫ +25%, LTV +$15. –†–∏—Å–∫: 30% —à–∞–Ω—Å –ø—Ä–æ–≤–∞–ª–∞ ‚Üí –¢—Ä–∞—Ñ–∏–∫ -10%.',
    apply: m => ({ Traffic: m.Traffic + 25, LTV: m.LTV + 15 }),
    feedback: '–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –¥–∞–ª–∞ –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!',
    risk: {
      chance: 0.3,
      effect: m => ({ Traffic: Math.max(m.Traffic - 10, 0) }),
      message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –ø—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å ‚Äî —Ç—Ä–∞—Ñ–∏–∫ —É–ø–∞–ª.',
      condition: m => true
    }
  },
  {
    icon: 'üõçÔ∏è',
    title: '–°–µ–∑–æ–Ω–Ω–∞—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞',
    description: '–ö–æ–Ω–≤–µ—Ä—Å–∏—è +6%, LTV -$10. –†–∏—Å–∫: –ü—Ä–∏ –Ω–∏–∑–∫–æ–º NPS ‚Üí Retention -8%.',
    apply: m => ({ Conversion: Math.min(m.Conversion + 6, 100), LTV: Math.max(m.LTV - 10, 0) }),
    feedback: '–°–∫–∏–¥–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∏!',
    risk: {
      chance: 0.2,
      effect: m => ({ Retention: Math.max(m.Retention - 8, 0) }),
      message: '–ù–∏–∑–∫–∏–π NPS ‚Äî —É–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–Ω–∏–∑–∏–ª–æ—Å—å.',
      condition: m => m.NPS < 50
    }
  },
  // HR-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
  {
    icon: 'üéì',
    title: '–û–±—É—á–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
    description: 'NPS +7, Retention +5%. –†–∏—Å–∫: OpEx +$80.',
    apply: m => ({ NPS: m.NPS + 7, Retention: Math.min(m.Retention + 5, 100) }),
    feedback: '–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–ª–∞ —Å–∏–ª—å–Ω–µ–µ!',
    risk: {
      effect: m => ({ OpEx: m.OpEx + 80 }),
      message: '–û–±—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –¥–µ–Ω–µ–≥ ‚Äî OpEx –≤—ã—Ä–æ—Å.',
      chance: 1,
      condition: m => true
    }
  },
  {
    icon: 'üßë‚Äçüíª',
    title: '–ê—É—Ç—Å–æ—Ä—Å–∏–Ω–≥ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
    description: 'OpEx -$60. –†–∏—Å–∫: NPS -10 (–Ω–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥).',
    apply: m => ({ OpEx: Math.max(m.OpEx - 60, 0) }),
    feedback: '–ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–Ω–∏–∂–µ–Ω—ã!',
    risk: {
      chance: 0.2,
      effect: m => ({ NPS: m.NPS - 10 }),
      message: '–ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É–ø–∞–ª–æ ‚Äî NPS —Å–Ω–∏–∑–∏–ª—Å—è.',
      condition: m => true
    }
  },
];

function getRandomInitiatives() {
  const shuffled = INITIATIVES.sort(() => 0.5 - Math.random());
  return shuffled.slice(0, 3);
}

function UnitQuestGame({ onExit, showLegend, setShowLegend, turn, setTurn, metrics, setMetrics, profitHistory, setProfitHistory, achievements, setAchievements, message, setMessage, gameOver, setGameOver, win, setWin, initiatives, setInitiatives, lastDelta, setLastDelta, lastOldMetrics, setLastOldMetrics }: {
  onExit: () => void;
  showLegend: boolean;
  setShowLegend: (v: boolean) => void;
  turn: number;
  setTurn: (v: number) => void;
  metrics: Metrics;
  setMetrics: (v: Metrics) => void;
  profitHistory: number[];
  setProfitHistory: (v: number[]) => void;
  achievements: string[];
  setAchievements: (v: string[]) => void;
  message: string | null;
  setMessage: (v: string | null) => void;
  gameOver: boolean;
  setGameOver: (v: boolean) => void;
  win: boolean;
  setWin: (v: boolean) => void;
  initiatives: { icon: string; title: string; description: string; apply: (m: Metrics) => Partial<Metrics>; feedback: string; risk?: { chance: number; effect: (m: Metrics) => Partial<Metrics>; message: string } }[];
  setInitiatives: (v: { icon: string; title: string; description: string; apply: (m: Metrics) => Partial<Metrics>; feedback: string; risk?: { chance: number; effect: (m: Metrics) => Partial<Metrics>; message: string } }[]) => void;
  lastDelta: Partial<Metrics> | null;
  setLastDelta: (v: Partial<Metrics> | null) => void;
  lastOldMetrics: Metrics | null;
  setLastOldMetrics: (v: Metrics | null) => void;
}) {
  // –í—Å–µ —Ö—É–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ!
  const [showFirework, setShowFirework] = useState(false);
  const mainRef = useRef<HTMLDivElement>(null);
  useEffect(() => {
    if (mainRef.current) {
      mainRef.current.style.opacity = '0';
      mainRef.current.style.transform = 'translateY(24px)';
      setTimeout(() => {
        if (mainRef.current) {
          mainRef.current.style.opacity = '1';
          mainRef.current.style.transform = 'translateY(0)';
        }
      }, 30);
    }
  }, [showLegend, turn]);
  React.useEffect(() => {
    const ach: string[] = [];
    if (metrics.CAC <= 30) ach.push('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥');
    if (metrics.Retention >= 80) ach.push('–ú–∞—Å—Ç–µ—Ä —É–¥–µ—Ä–∂–∞–Ω–∏—è');
    if (metrics.LTV >= 150) ach.push('–ì—É—Ä—É LTV');
    setAchievements(Array.from(new Set(ach)));
  }, [metrics]);

  // –£—Å–ª–æ–≤–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ö—É–∫–æ–≤!
  if (showLegend) {
    return (
      <section style={{ background: '#fff', borderRadius: 28, boxShadow: '0 8px 32px rgba(0,0,0,0.12)', border: '1px solid #e5e5e7', padding: 56, marginBottom: 48, marginTop: 0, maxWidth: 640, marginLeft: 'auto', marginRight: 'auto', fontFamily: 'SF Pro Display, Helvetica Neue, Arial, sans-serif', display: 'flex', flexDirection: 'column', gap: 32, alignItems: 'center', ...fadeStyle }}>
        <div style={{ fontWeight: 700, fontSize: 32, color: '#111', letterSpacing: -1, marginBottom: 0, lineHeight: 1.1 }}>Unit Quest: –ë–∏—Ç–≤–∞ –∑–∞ –ø—Ä–∏–±—ã–ª—å</div>
        <div style={{ fontSize: 20, color: '#222', fontWeight: 400, marginBottom: 0, lineHeight: 1.5, maxWidth: 520 }}>
          <b>–í—ã ‚Äî –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞—Ä—Ç–∞–ø–∞, —Ä–∞–∑–≤–∏–≤–∞–µ—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç.</b> –í–∞—à–∞ —Ü–µ–ª—å ‚Äî –¥–æ—Å—Ç–∏—á—å –ø—Ä–∏–±—ã–ª–∏ <b>$200&nbsp;000</b> –∑–∞ 10 –º–µ—Å—è—Ü–µ–≤, –±–∞–ª–∞–Ω—Å–∏—Ä—É—è –º–µ—Ç—Ä–∏–∫–∏ —é–Ω–∏—Ç-—ç–∫–æ–Ω–æ–º–∏–∫–∏.<br /><br />
          <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</b>
          <ul style={{ margin: '16px 0 0 18px', color: '#444', fontSize: 18, lineHeight: 1.5 }}>
            <li>–í –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–ª—É—á–∞–π–Ω—ã ‚Äî –∫–∞–∂–¥—ã–π —Ä–∞–∑ –Ω–æ–≤—ã–π –≤—ã–∑–æ–≤!</li>
            <li>–í –∫–∞–∂–¥–æ–º —Ö–æ–¥—É –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ 3 –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤, —á—Ç–æ–±—ã –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏.</li>
            <li>–°–ª–µ–¥–∏—Ç–µ –∑–∞ CAC, LTV, Retention, Conversion, –ö–ª–∏–µ–Ω—Ç–∞–º–∏, –ë—é–¥–∂–µ—Ç–æ–º –∏ –ü—Ä–∏–±—ã–ª—å—é.</li>
            <li>–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –∫ 10-–º—É —Ö–æ–¥—É –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å –Ω–µ –º–µ–Ω–µ–µ $200&nbsp;000.</li>
            <li>–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏–º–µ—é—Ç —Ä–∏—Å–∫ ‚Äî –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!</li>
            <li>–ü–æ—Å–ª–µ –∏–∑—É—á–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–ù–∞—á–∞—Ç—å –∏–≥—Ä—É¬ª.</li>
          </ul>
        </div>
        <button onClick={() => setShowLegend(false)} style={{ padding: '16px 40px', background: 'linear-gradient(90deg,#00b8ff,#7800ff 100%)', color: '#fff', fontWeight: 700, fontSize: 20, border: 'none', borderRadius: 16, cursor: 'pointer', boxShadow: '0 2px 8px rgba(0,184,255,0.10)', transition: 'background 0.2s', marginTop: 24, willChange: 'transform' }}
          onMouseDown={e => e.currentTarget.style.transform = 'scale(0.97)'}
          onMouseUp={e => e.currentTarget.style.transform = ''}
          onMouseLeave={e => e.currentTarget.style.transform = ''}
        >–ù–∞—á–∞—Ç—å –∏–≥—Ä—É</button>
      </section>
    );
  }

  const [metricsHistory, setMetricsHistory] = React.useState<Metrics[]>([]);
  const [riskFails, setRiskFails] = React.useState(0);
  const [abTests, setAbTests] = React.useState(0);
  const [partnerships, setPartnerships] = React.useState(0);
  const [viralityClients, setViralityClients] = React.useState(0);
  const [supportUpgrades, setSupportUpgrades] = React.useState(0);
  const [opexLowStreak, setOpexLowStreak] = React.useState(0);

  function checkAchievements(metrics: Metrics) {
    const params = {
      metrics,
      history: metricsHistory,
      riskFails,
      abTests,
      partnerships,
      viralityClients,
      supportUpgrades,
      opexLowStreak,
    };
    const newAch = [...achievements];
    for (const ach of ACHIEVEMENTS_EXT) {
      if (!newAch.includes(ach.label) && ach.check(params)) {
        newAch.push(ach.label);
      }
    }
    setAchievements(Array.from(new Set(newAch)));
  }

  function handleInitiative(idx: number) {
    if (gameOver) return;
    let m = { ...metrics };
    const ini = initiatives[idx];
    setLastOldMetrics({ ...metrics });
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç
    m = { ...m, ...ini.apply(m) };
    let feedback = ini.feedback;
    let riskTriggered = false;
    // –†–∏—Å–∫
    if (ini.risk && ('condition' in ini.risk ? typeof ini.risk.condition === 'function' ? ini.risk.condition(m) : true : true)) {
      if (Math.random() < ini.risk.chance) {
        m = { ...m, ...ini.risk.effect(m) };
        feedback = ini.risk.message;
        riskTriggered = true;
      }
    }
    // –°—á–∏—Ç–∞–µ–º –¥–µ–ª—å—Ç—É –º–µ—Ç—Ä–∏–∫
    const delta: Partial<Metrics> = {};
    (['CAC', 'LTV', 'Retention', 'Conversion', 'Clients', 'Budget', 'Fixed', 'Profit', 'NPS', 'Virality', 'Traffic', 'OpEx'] as const).forEach(key => {
      if (metrics[key] !== m[key]) delta[key] = m[key];
    });
    setLastDelta(delta);
    // –§–æ—Ä–º—É–ª—ã —Ä–∞—Å—á—ë—Ç–∞
    // –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã
    const newClients = Math.floor((m.Budget / (m.CAC || 1)) * (m.Conversion / 100));
    m.Clients = Math.max(m.Clients + newClients, 0);
    // Virality –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (m.Virality > 0) {
      setViralityClients(v => v + Math.floor(newClients * m.Virality));
    }
    // LTV (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –º–æ–∂–Ω–æ —É—Å–ª–æ–∂–Ω–∏—Ç—å)
    // Retention (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å)
    // –ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü
    m.Profit = (m.LTV - m.CAC) * m.Clients - m.Fixed - m.OpEx;
    m.Budget = m.Budget + m.Profit - m.Fixed - m.OpEx;

    // –°—á—ë—Ç—á–∏–∫–∏ –¥–ª—è –∞—á–∏–≤–æ–∫
    // 1. riskFails
    if (riskTriggered && feedback && feedback.toLowerCase().includes('—É–ø–∞–ª') || feedback.toLowerCase().includes('—Å–Ω–∏–∑–∏–ª—Å—è') || feedback.toLowerCase().includes('—à—Ç—Ä–∞—Ñ') || feedback.toLowerCase().includes('—Å–±–æ–π') || feedback.toLowerCase().includes('–ø–æ—Ç–µ—Ä—è')) {
      setRiskFails(r => r + 1);
    }
    // 2. abTests (–∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ Conversion)
    if (delta.Conversion !== undefined && delta.Conversion > metrics.Conversion) {
      setAbTests(a => a + 1);
    }
    // 3. partnerships (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ title)
    if (/–ø–∞—Ä—Ç–Ω–µ—Ä|–ø–∞—Ä—Ç–Ω—ë—Ä|–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è|–∫–æ–ª–ª–∞–±|–∞–∫—Ü–∏—è|–±—Ä–µ–Ω–¥/i.test(ini.title)) {
      setPartnerships(p => p + 1);
    }
    // 4. supportUpgrades (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ title)
    if (/–ø–æ–¥–¥–µ—Ä–∂–∫|—á–∞—Ç|ai|–ø–æ–º–æ—â–Ω–∏–∫|–∞—É—Ç—Å–æ—Ä—Å–∏–Ω–≥/i.test(ini.title)) {
      setSupportUpgrades(s => s + 1);
    }
    // 5. opexLowStreak
    if (m.OpEx <= 100) {
      setOpexLowStreak(s => s + 1);
    } else {
      setOpexLowStreak(0);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã/–ø–æ—Ä–∞–∂–µ–Ω–∏—è
    let over = false, win = false;
    if (m.Budget < 0) {
      over = true;
      setMessage('–ë—é–¥–∂–µ—Ç —É—à—ë–ª –≤ –º–∏–Ω—É—Å. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!');
    } else if (turn === MAX_TURNS && m.Profit >= WIN_PROFIT) {
      over = true; win = true;
      setMessage('–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –ø–æ –ø—Ä–∏–±—ã–ª–∏!');
      import('canvas-confetti').then(confetti => {
        confetti.default({
          particleCount: 120,
          spread: 90,
          origin: { y: 0.7 },
          zIndex: 9999
        });
      });
    } else if (turn === MAX_TURNS) {
      over = true;
      setMessage('–¶–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –∑–∞ 10 —Ö–æ–¥–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!');
    } else {
      setMessage(feedback);
    }

    setMetrics(m);
    setProfitHistory([...profitHistory, m.Profit]);
    setGameOver(over);
    setWin(win);
    if (!over) setTurn(turn + 1);
    setInitiatives(getRandomInitiatives());
    setMetricsHistory([...metricsHistory, m]);
    checkAchievements(m);
  }

  // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–±—ã–ª–∏
  function ProfitChart() {
    const W = 420, H = 120, pad = 36;
    const data = profitHistory.map((y, i) => ({ x: i, y }));
    let minY = Math.min(...profitHistory, 0, WIN_PROFIT);
    let maxY = Math.max(...profitHistory, 0, WIN_PROFIT);
    if (minY === maxY) {
      minY -= 100;
      maxY += 100;
    }
    const scaleX = (x: number) => pad + (x / MAX_TURNS) * (W - 2 * pad);
    const scaleY = (y: number) => H - pad - ((y - minY) / (maxY - minY || 1)) * (H - 2 * pad);
    const path = data.map((d, i) => `${i === 0 ? 'M' : 'L'}${scaleX(d.x)},${scaleY(d.y)}`).join(' ');
    return (
      <div style={{ width: '100%', minWidth: 0, overflow: 'hidden', maxWidth: 420, margin: '0 auto' }}>
        <svg viewBox={`0 0 ${W} ${H}`} style={{ width: '100%', height: 'auto', display: 'block' }}>
          <line x1={pad} y1={H - pad} x2={W - pad} y2={H - pad} stroke="#bbb" strokeWidth={1.5} />
          <line x1={pad} y1={pad} x2={pad} y2={H - pad} stroke="#bbb" strokeWidth={1.5} />
          <path d={path} fill="none" stroke="url(#grad)" strokeWidth={3} />
          <defs>
            <linearGradient id="grad" x1="0" y1="0" x2="1" y2="0">
              <stop offset="0%" stopColor="#00b8ff" />
              <stop offset="100%" stopColor="#7800ff" />
            </linearGradient>
          </defs>
          {/* –¶–µ–ª–µ–≤–∞—è –º–µ—Ç—Ä–∏–∫–∞ */}
          <line x1={pad} y1={scaleY(WIN_PROFIT)} x2={W - pad} y2={scaleY(WIN_PROFIT)} stroke="#00b8ff" strokeWidth={2} strokeDasharray="6 6" />
          <text x={W - pad + 4} y={scaleY(WIN_PROFIT) + 4} fontSize={14} fill="#00b8ff" fontWeight={700}>–¶–µ–ª—å $200&nbsp;000</text>
          {/* –ü–æ–¥–ø–∏—Å–∏ X */}
          {[0, 2, 4, 6, 8, 10].map(x => (
            <text key={x} x={scaleX(x)} y={H - pad + 22} fontSize={13} fill="#888" textAnchor="middle">{x}</text>
          ))}
          {/* –ü–æ–¥–ø–∏—Å–∏ Y */}
          {[minY, 0, WIN_PROFIT].map(y => (
            <text key={y} x={pad - 10} y={scaleY(y) + 5} fontSize={13} fill="#888" textAnchor="end">{formatNumber(Math.round(y))}</text>
          ))}
          <text x={W/2} y={H - 2} fontSize={14} fill="#0a2540" textAnchor="middle" fontWeight={600}>–•–æ–¥—ã</text>
          <text x={pad - 32} y={pad - 8} fontSize={14} fill="#0a2540" textAnchor="middle" fontWeight={600} transform={`rotate(-90,${pad - 32},${pad - 8})`}>–ü—Ä–∏–±—ã–ª—å, $</text>
        </svg>
      </div>
    );
  }

  const handleExit = () => {
    setShowLegend(true);
    setTurn(1);
    setMetrics(getRandomInitMetrics());
    setProfitHistory([0]);
    setAchievements([]);
    setMessage(null);
    setGameOver(false);
    setWin(false);
    setInitiatives(getRandomInitiatives());
    setLastDelta(null);
    setLastOldMetrics(null);
  };

  return (
    <section ref={mainRef} style={{ background: '#fff', borderRadius: 28, boxShadow: '0 8px 32px rgba(0,0,0,0.12)', border: '1px solid #e5e5e7', padding: 56, marginBottom: 48, marginTop: 0, maxWidth: 640, marginLeft: 'auto', marginRight: 'auto', fontFamily: 'SF Pro Display, Helvetica Neue, Arial, sans-serif', display: 'flex', flexDirection: 'column', gap: 36, ...fadeStyle, position: 'relative', paddingTop: 110 }}>
      <AchievementsFooter achievements={achievements} />
      <div style={{ fontWeight: 700, fontSize: 32, color: '#111', letterSpacing: -1, marginBottom: 0, lineHeight: 1.1 }}>Unit Quest: –ë–∏—Ç–≤–∞ –∑–∞ –ø—Ä–∏–±—ã–ª—å</div>
      <div style={{ display: 'flex', flexDirection: 'column', gap: 24 }}>
        {message && <div style={{ fontSize: 17, color: gameOver && !win ? '#ff3b30' : '#0a2540', background: '#f8f8fa', borderRadius: 10, padding: '12px 18px', fontWeight: 500, boxShadow: '0 1px 4px rgba(0,0,0,0.03)' }}>{message}</div>}
      </div>
      <div style={{ display: 'flex', flexWrap: 'wrap', gap: 32, marginBottom: 12 }}>
        <div style={{ minWidth: 220 }}>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>CAC: <span style={{ color: '#00b8ff' }}>${formatNumber(metrics.CAC)}</span>{lastDelta && lastOldMetrics && lastDelta.CAC !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.CAC)}‚Üí{formatNumber(metrics.CAC)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>LTV: <span style={{ color: '#7800ff' }}>${formatNumber(metrics.LTV)}</span>{lastDelta && lastOldMetrics && lastDelta.LTV !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.LTV)}‚Üí{formatNumber(metrics.LTV)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>Retention: <span style={{ color: '#00b8ff' }}>{metrics.Retention}%</span>{lastDelta && lastOldMetrics && lastDelta.Retention !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.Retention)}‚Üí{formatNumber(metrics.Retention)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>Conversion: <span style={{ color: '#7800ff' }}>{metrics.Conversion}%</span>{lastDelta && lastOldMetrics && lastDelta.Conversion !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.Conversion)}‚Üí{formatNumber(metrics.Conversion)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>–ö–ª–∏–µ–Ω—Ç—ã: <span style={{ color: '#00b8ff' }}>{formatNumber(metrics.Clients)}</span>{lastDelta && lastOldMetrics && lastDelta.Clients !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.Clients)}‚Üí{formatNumber(metrics.Clients)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>–¢—Ä–∞—Ñ–∏–∫: <span style={{ color: '#00b8ff' }}>{formatNumber(metrics.Traffic)}</span>{lastDelta && lastOldMetrics && lastDelta.Traffic !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.Traffic)}‚Üí{formatNumber(metrics.Traffic)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å: <span style={{ color: '#7800ff' }}>{metrics.Virality.toFixed(2)}</span>{lastDelta && lastOldMetrics && lastDelta.Virality !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({lastOldMetrics.Virality.toFixed(2)}‚Üí{metrics.Virality.toFixed(2)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>NPS: <span style={{ color: '#00b8ff' }}>{metrics.NPS}</span>{lastDelta && lastOldMetrics && lastDelta.NPS !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.NPS)}‚Üí{formatNumber(metrics.NPS)})</span> : null}</div>
        </div>
        <div style={{ minWidth: 180 }}>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>–ë—é–¥–∂–µ—Ç: <span style={{ color: '#00b8ff' }}>${formatNumber(metrics.Budget)}</span>{lastDelta && lastOldMetrics && lastDelta.Budget !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.Budget)}‚Üí{formatNumber(metrics.Budget)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>–§–∏–∫—Å. –∑–∞—Ç—Ä–∞—Ç—ã: <span style={{ color: '#7800ff' }}>${formatNumber(metrics.Fixed)}</span>{lastDelta && lastOldMetrics && lastDelta.Fixed !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.Fixed)}‚Üí{formatNumber(metrics.Fixed)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>OpEx: <span style={{ color: '#7800ff' }}>${formatNumber(metrics.OpEx)}</span>{lastDelta && lastOldMetrics && lastDelta.OpEx !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.OpEx)}‚Üí{formatNumber(metrics.OpEx)})</span> : null}</div>
          <div style={{ fontSize: 18, color: '#0a2540', fontWeight: 600 }}>–ü—Ä–∏–±—ã–ª—å: <span style={{ color: metrics.Profit >= 0 ? '#00b8ff' : '#ff3b30' }}>${formatNumber(metrics.Profit)}</span>{lastDelta && lastOldMetrics && lastDelta.Profit !== undefined ? <span style={{ color: '#888', fontSize: 15 }}> ({formatNumber(lastOldMetrics.Profit)}‚Üí{formatNumber(metrics.Profit)})</span> : null}</div>
        </div>
        <div style={{ flex: 1, minWidth: 220 }}>
          <ProfitChart />
        </div>
      </div>
      <div style={{ fontWeight: 600, fontSize: 20, marginBottom: 8 }}>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—É:</div>
      <div style={{ display: 'flex', flexDirection: 'column', gap: 18, margin: '1px 0 18px 0' }}>
        {initiatives.map((ini, idx) => (
          <button
            key={ini.title}
            onClick={() => handleInitiative(idx)}
            disabled={gameOver}
            style={{
              width: '100%',
              background: 'linear-gradient(90deg,#f0f7ff,#e0f7fa 100%)',
              border: '1.5px solid #d1d1d6',
              borderRadius: 16,
              boxShadow: '0 2px 8px rgba(0,184,255,0.07)',
              padding: '20px 28px',
              fontSize: 17,
              fontWeight: 600,
              color: '#0a2540',
              cursor: gameOver ? 'not-allowed' : 'pointer',
              transition: 'box-shadow 0.2s, transform 0.15s, background 0.2s',
              marginBottom: 0,
              display: 'flex',
              flexDirection: 'row',
              alignItems: 'center',
              justifyContent: 'flex-start',
              gap: 18,
              minHeight: 64,
              textAlign: 'left',
              willChange: 'transform',
              opacity: gameOver ? 0.6 : 1,
            }}
            onMouseDown={e => e.currentTarget.style.transform = 'scale(0.97)'}
            onMouseUp={e => e.currentTarget.style.transform = ''}
            onMouseLeave={e => e.currentTarget.style.transform = ''}
            onFocus={e => e.currentTarget.style.boxShadow = '0 4px 16px #00b8ff33'}
            onBlur={e => e.currentTarget.style.boxShadow = ''}
          >
            <span style={{ fontSize: 32, marginRight: 16 }}>{ini.icon}</span>
            <div style={{ flex: 1 }}>
              <div style={{ fontWeight: 700, fontSize: 19, marginBottom: 4 }}>{ini.title}</div>
              <div style={{ color: '#888', fontSize: 15 }}>{ini.description}</div>
            </div>
          </button>
        ))}
      </div>
      {gameOver && (
        <button onClick={handleExit} style={{ marginTop: 24, width: 180, alignSelf: 'center', padding: '14px 0', background: 'linear-gradient(90deg,#00b8ff,#7800ff 100%)', color: '#fff', fontWeight: 700, fontSize: 18, border: 'none', borderRadius: 12, cursor: 'pointer', boxShadow: '0 2px 8px rgba(0,184,255,0.10)', transition: 'background 0.2s' }}>–í—ã–π—Ç–∏ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä</button>
      )}
    </section>
  );
}

export default function EconomySimulator() {
  const [showLegend, setShowLegend] = React.useState(true);
  const [turn, setTurn] = React.useState(1);
  const [metrics, setMetrics] = React.useState(() => getRandomInitMetrics());
  const [profitHistory, setProfitHistory] = React.useState<number[]>([0]);
  const [achievements, setAchievements] = React.useState<string[]>([]);
  const [message, setMessage] = React.useState<string | null>(null);
  const [gameOver, setGameOver] = React.useState(false);
  const [win, setWin] = React.useState(false);
  const [initiatives, setInitiatives] = React.useState(getRandomInitiatives());
  const [lastDelta, setLastDelta] = React.useState<Partial<Metrics> | null>(null);
  const [lastOldMetrics, setLastOldMetrics] = React.useState<Metrics | null>(null);
  const [metricsHistory, setMetricsHistory] = React.useState<Metrics[]>([]);
  const [riskFails, setRiskFails] = React.useState(0);
  const [abTests, setAbTests] = React.useState(0);
  const [partnerships, setPartnerships] = React.useState(0);
  const [viralityClients, setViralityClients] = React.useState(0);
  const [supportUpgrades, setSupportUpgrades] = React.useState(0);
  const [opexLowStreak, setOpexLowStreak] = React.useState(0);

  const handleExit = () => {
    setShowLegend(true);
    setTurn(1);
    setMetrics(getRandomInitMetrics());
    setProfitHistory([0]);
    setAchievements([]);
    setMessage(null);
    setGameOver(false);
    setWin(false);
    setInitiatives(getRandomInitiatives());
    setLastDelta(null);
    setLastOldMetrics(null);
  };

  function checkAchievements(metrics: Metrics) {
    const params = {
      metrics,
      history: metricsHistory,
      riskFails,
      abTests,
      partnerships,
      viralityClients,
      supportUpgrades,
      opexLowStreak,
    };
    const newAch = [...achievements];
    for (const ach of ACHIEVEMENTS_EXT) {
      if (!newAch.includes(ach.label) && ach.check(params)) {
        newAch.push(ach.label);
      }
    }
    setAchievements(Array.from(new Set(newAch)));
  }

  return (
    <UnitQuestGame
      showLegend={showLegend}
      setShowLegend={setShowLegend}
      onExit={handleExit}
      turn={turn}
      setTurn={setTurn}
      metrics={metrics}
      setMetrics={setMetrics}
      profitHistory={profitHistory}
      setProfitHistory={setProfitHistory}
      achievements={achievements}
      setAchievements={setAchievements}
      message={message}
      setMessage={setMessage}
      gameOver={gameOver}
      setGameOver={setGameOver}
      win={win}
      setWin={setWin}
      initiatives={initiatives}
      setInitiatives={setInitiatives}
      lastDelta={lastDelta}
      setLastDelta={setLastDelta}
      lastOldMetrics={lastOldMetrics}
      setLastOldMetrics={setLastOldMetrics}
    />
  );
}

// –ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è –¥–ª—è –∏–Ω–ø—É—Ç–æ–≤ –∏ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç–∏–ª–µ Revolut
const revolutInputStyle = {
  width: '100%',
  padding: '18px 20px',
  border: '1.5px solid #d1d1d6',
  borderRadius: 16,
  fontSize: 20,
  background: 'linear-gradient(120deg, #f6f8fa 0%, #fff 100%)',
  outline: 'none',
  color: '#111',
  fontWeight: 500,
  transition: 'border 0.2s, box-shadow 0.2s',
  boxSizing: 'border-box' as const,
  marginBottom: 4,
  boxShadow: '0 2px 12px 0 rgba(0,184,255,0.07)',
};
const revolutButtonStyle = (active: boolean = true) => ({
  padding: '16px 40px',
  background: active
    ? 'linear-gradient(90deg,#00b8ff,#7800ff 100%)'
    : 'linear-gradient(90deg, #e0e0e0 0%, #f2f2f7 100%)',
  color: active ? '#fff' : '#bbb',
  fontWeight: 700,
  fontSize: 20,
  border: 'none',
  borderRadius: 18,
  cursor: active ? 'pointer' : 'not-allowed',
  boxShadow: active ? '0 2px 12px 0 rgba(0,184,255,0.10)' : 'none',
  marginBottom: 16,
  marginTop: 8,
  transition: 'background 0.2s, box-shadow 0.2s, transform 0.15s',
  willChange: 'transform',
  letterSpacing: 0.2,
});
